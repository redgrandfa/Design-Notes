軟體專案管理 【非顯學】  
    沒人有學位
    餐與過成功專案的人很少 退休沒傳承經驗

    專案以各種形式失敗
        無法推出
        耗時太久推出
        推出沒人要的
        成員不快樂

    約爾測試12項

將學到
    雇用激勵人才
    估計時程
    設計功能、撰寫實際有用的規格書

    組織、激勵團隊

    專案似乎總在數個月後停滯
    軟體策略?


part 1 小處 該在團隊中進行的事
part 2 程式人員、團隊管理有關
part 3 大策略 開創可持續發展的軟體開發事業

    軟體開發方法論 通常是優秀人力不足的跡象?


====
1 底層

2 約爾測試12項
    問題追蹤資料庫
        重現問題的完整步驟
        應該看到的行為
        實際看到的行為
        被指派的負責人
        是否已修正

    0錯誤作法
        - 越晚修正，成本越高
            度假中同事的
            已出貨
        - 寫新程式的時間  比 修程式容易預估
        - 維持0錯 可以快速加新功能

    定時程 (9章)
        程式設計人員不愛訂時程

    先寫規格 (5~8章)
        寫程式後才修正文件 => 
            情感代價 => 不想拋棄程式碼
            時間代價

    安靜環境=>心流
        問同事 => 害同事損失15分鐘 要重新進入

    最好的工具
        GUI => 雙螢幕

    測試人員
        測試薪較低，讓設計測試很浪費錢
        每2,3個設計 就配一名測試

    面試寫程式
        NG：查文件就知道的、需要靈光乍現的

    走廊使用性測試


    => 即使滿分 也可能官僚化 會議太多

=== unicode
    ASCII ~127 後面變成亂用區
    16位元 並非65536個字母

    每一個觀念上的字母都配一個 碼點 U+0645  後面四個數字是十六進位


    FE EF 位元順序標記 high-endian or low-endian

    英語覺得浪費太多 => UTF-8
    UCS-1 , 2, 4
    
    字元編碼 => unicode轉其他編碼  如果沒有 就變?或方框

    content-type charset="utf-8"

    <meta ...content="text/plain;charset=utf-8"

    如果都沒有，瀏覽器會根據位元組頻率分布 猜一個編碼。 選單也能改顯示的編碼


====5 規格
    該寫規格的原因
        沒有規格還是得溝通
        有規格才能訂出時程
            品保：知道如何測試
            行銷：宣傳尚未出現的產品
            業務：
            開發人員：知道如何寫
            技術文件作者：說明手冊
            經理：

    本能不想寫規格的原因
        設計爭議 => 沒人願意決策 => 政治
        多數人恐懼寫東西


    【規格應包含】
        聲明
        作者

        概要
        情境
            假設人物
        非目標
        細節
            流程圖
            各畫面規格

        未定義項目

        旁註

        規格隨時更新

====誰寫規格：規格應由【產品經理】撰寫

        不要把 程式設計師/行銷 升為產品經理 (彼得原理)
        別讓程式設計員 向產品經理報告??
            抱怨> 要求簡化 > 無法建立共識??

====規格 痛點： 沒人讀 => 簡明+有趣

    1. 有趣
    2. 人腦可編譯
    3. 越簡單越好
    4. 多審閱
    5. 樣板不好，(多份文件難以有一樣的)


====無痛軟體時程
    excel
        簡單 ：七欄 功能>任務 優先度 初始預估 目前預估 已耗時 剩餘
        (每個功能應包含多任務)

        (篩選 樞紐分析表 WorkDay函數)

    只有實際寫的程式設計員 才能排出該項時程

    任務要切細

    紀錄最初 和目前估計 => 錯誤學習法，以進步
        完成時，目前預估 == 已用，且剩餘=0
        每天更新耗時

    +【休假】
    +【除錯時間】
    +【整合時間】
    +【緩衝時間】

    不讓經理 叫 程式設計員 縮減估計

    時程像積木不可壓縮

    若不做時程：
        1. 很有用的功能
        2. 很容易 且 設計員想寫

        => 設計員會優先做2，導致後期沒時間

    

====10 每日編譯 ?? 這章有點不直覺
    本質：
        設計員 循環= 編輯>編譯>測試  => 所以IDE 會 極力加速此一過程
        團隊 循環= 開發>修正>測試 => 如何加速此一循環?

    每日編譯

    一鍵編譯

    編譯器警告等級 max

==== 11 不妥協地抓蟲
    考量除蟲 的機會成本
    確定能得到經濟回饋

    找出那些問題值得修好

====12
    熱縮封膜軟體(開放源碼、web軟體、顧問式)
    內部用軟體
        投入成本必須適合單一公司規模
            到某個程度就不適合再投入資金 => 對於年輕開發者而言 會沮喪

        而web軟體 最後1%的穩定度和易用度 會成為 競爭優勢

    嵌入式軟體
        在硬體中且幾乎無法更新 => 即使技術上能更新，但用戶不會去更新
        CPU慢 會花很多時間 最佳化
        跑得快很重要
        輸入輸出裝置可能很劣

    遊戲軟體
        此種的經濟學是打擊型
        有安打及許多三振  賺的要彌補虧的
        比較像電影業
        比較不會想更新? => 一次做好

    用過即丟軟體
        為了產生其他東西而創造的

    
    ----了解自己的世界
        很多方法都很好
        ex. 沒人能真得把 TDD 應用在GUI開發上

        聽到新方法時，思考其從哪來


====13 紙上原型試作
    故事：弄出一個原型以便作可用性測試
        結果此原型必須先重現許多功能才能測

        最後結論 = 好，作 => 實際做出功能比作出原型的時間還短很多..

    作者已放棄原型

    紙上原型 => 直覺覺得花很少時間+醜，大家無壓力毒舌
        可立即把東西搬來搬去

====14 架構太空人

    一直向上抽象
        傳送文書檔 
            => 傳送檔案
            傳送網頁請求
            呼叫物件 
                
                =>傳送訊息  => 太抽象 沒有實際意義

    ex. 音樂下載點對點服務
        (重點是 輸入歌名可馬上聽到歌)

        => 提出更廣泛的 下載服務

    圍繞在架構外的超級宣傳
        誇大 史詩 理想化 豪言 => 人吃這套

    搞架構的人 在嘗試解決那些 自認能解決的問題
        而非 解決了會有用處的問題

====15 邊開火邊移動
    無生產力狀態 通常持續一兩天
     整星期 心靜不下來
    
    也許人只能接受高低潮 期望 平均產出 能值得被雇用

    每天只有兩三小時能好好工作

    進入狀況後要維持 不難
        => 開始就對了
        也許 和夥伴 pair programing 是這樣生效的

    => 邊開火邊移動

    大公司 不斷推出新產品 讓其他人追趕

    大公司業務 ：你不一定要買我們的東西，但你要確定買到的能支援!@#$%^&*...否則...
    被馴服的技術長：問小公司，你們有支援@#$%^嗎?
    小公司疲於加新功能 只是一個勾選功能 (為了打個勾)



====16
    設計是 價值比成本增加得快的模糊區域

    1% 的工作可能佔 90%時間

====17 三個錯誤想法
    搜尋的困難在於 是否能找到足夠的結果
    ----
        多型態 去結合deconjugated

        搜尋真正的問題在於排序
            正確排序 比 把符合地列出來 更重要

    去鋸齒的文字較好看
        => 利用灰階

    網路軟體 應該讓 網路資源的行為和本地一樣
        三項大差異
            可使用性
            延遲
            可靠性

====18 雙文化
    unix文化：重視 對 其他 設計員有用的程式
        預設你詳讀每一個說明文字
    windows文化：重視 對 非設計員有用的程式
        任何說明都 能獨立看

====19 由用戶端自動化取得當機報告
    錯誤收集自動化 => 問題追蹤資料庫

    只問一個問題，避免意願降低
    提供連結查看實際要傳送的報告長相


    收集哪些資訊?
        系統資訊 核心傾印 core dump => 不需要
        只需要確切的程式行數

    對應該錯誤的代號
    錯誤訊息
    電郵
    瀏覽器、軟體版號


    延遲傳送：如果當機很嚴重的話，APP可能當下無法傳

    識別重複的當機
        確保不同人的相同當機 => 相同辨識字串

        此字串需不受語言影響
        內文才受語言影響

        字串分析要方便  規劃安插符號

            把標記由繼續報告改為停止報告??
            針對此一錯誤 甚至可發訊息給使用者 先說怎麼處理?

    開發使用偶數編譯編號
    客戶使用奇數編譯編號


    暫時掠過

====20面試
    讓團隊成員參與面試，不要只有經理

    一次只面試一人，不要團體面試

    只有錄用/不錄用，沒有像是"錄用"但別加我團隊

    任何猶豫 = 不錄用，沒有像是

    錄用壞人選 嚴重
    錯過好人選 還好

    人選：聰明、把事情做好 => 有資質但並非具備特定技能。

        博士：聰明但沒把事做好

        聰明 不等於 知道瑣碎問題的答案

    面試官不要先聽見其他人意見  會被影響

    給開放式問題，從回答中尋找
        簡介
        最近專案的問題
            尋找熱情 => 特定主題，否定某些事，讓他們辯護
            能把事情由各個層面解釋清楚
            如果專案是多人負責，尋找擔任領導角色的跡象

        不可能的問題
            看如何處理

        程式
            不額外記憶體，就地反向字串
            反向linked list

            良好習慣： 寫==運算時，常數放左側，可避免不小心寫成指派運算子

        滿意嗎?

        有問題嗎?
            好人選會被許多人面試，提不出問題也無妨

    最後五分鐘推薦自己公司，劉好印象

    ----不該提的問題

        只問和工作絕對有關的
        避免腦筋急轉彎

====21 激勵是有害的

    呆伯特式管理書

        匿名向上評估自己的直屬經理 (假裝這樣就能很誠實?)
        自我評估表 讓經理'參考'
        經理送獎勵名單，但將完全被忽略，隨機獎勵

        這種系統未考慮到 人各有獨特天賦，需要各種天賦才能讓團隊好好運作

    心理學：多數人都自認已經把事情做得很好
        => 若評估結果公正，大多數人都會對評估失望 => 犧牲士氣

    成員間產生嫌隙

    統計：為了報酬而工作的人，表現不如完全不期望報酬的人


    
    激勵的傷害大過好處
        暗示他們是為了獎勵而努力/有甜頭才努力 => 貶低人格 

     
====22 不用測試人員的五大藉口
    每兩個設計員 就要一個測試員

    1 問題是懶惰的程序員弄出來的
        不請測試，可以強迫程序員一開始寫正確...
            => bug就是看不見才需要其人人幫看...
        習慣不同
    2 軟體放在網路上，即使有問題也能馬上修好
        修問題也可能產生更多問題
        丟出修正版 => 壞印象

    3 客戶會替我測
        廣泛beta測試
        不斷改版 直到最終版

        => 客戶大量的回報 無法處理
        => 客戶送不出報告

    4 有資格勝任測試的，都不想擔任
        生產力是其他人的十多倍
        聰明的人都對日復一日的測試厭煩

        建議：
            測試作為 技術客服的晉升工作，至少比處理機車客戶要好

            鼓勵測試員 上程式課，學會用自動化工具
            流動性高，多招募
            非傳統工作者，聰明青少年、大學生
            雇臨時人力
            千萬不要讓程序員去測試，很可能損失優秀程序員
    5 頭號理由：請不起測試員
        比程序員便宜太多
        機會成本 

        (若程序員跑了，獵人頭的費用>雇用測試員的)

====23 工作切換 有害無益
    機器 或 人 都是有切換的成本

    平均來看， 是 循序處理 勝過 多工處理

====24 你絕對不該做的事 
    把程式重寫 == 把知識丟掉

    讀程式比寫程式困難 => 程序員通常都抱怨舊的

        舊程式碼 在真實世界驗證過

    效能差可以局部最佳化

    重頭開始也不會比第一次好 => 團隊已經不同

====冰山

    客戶不知道他們要的是什麼
        改來改去
        交付時，失望
        契約同意了未明確定義的東西

    【不期望客戶知道他們要什麼】


    UI只佔 10%
    若開發有一半時間在抓蟲
        => UI只佔5%
    視覺部分只佔1%


    重要推論：
        若UI不好看，對方會認為你整個程式不好

        若UI非常漂亮，非程序員 的人 會以為 它幾乎已經完工

        漂亮的網站會得到較高評價

        給一些無關痛癢的選項 讓非程式員 有參與到

        展示畫面

        未完成功能的，就不要放到首頁導覽


        每週自我慶祝郵件，談論進度從32% => 35% 將能如期交付...等等

====26 抽象滲漏法則
    TCP 可靠的 通訊協定  
    IP 不可靠
    TCP 架在IP上 ???WTF??

    如果狀況不加，就再送一次?
    預定路線不能用，就換條路
    順序不對 就重排
        結果接收端只會覺得慢一點
    
    => 所有重大抽象機制 在某種程式上是有漏洞的

====28 測量
    【測量機能障礙】
    經理人喜歡測量，並將它和獎懲方案綁一起
        只要沒有百分百監督 => 產生下有對策

    軟體ex. 寫一堆有錯的程式 再全部修好
    
    測量績效本身就有困難，激勵似乎更沒用

====29 在尋找愚蠢
    除非由程式設計師掌舵 否則軟體公司不會成功
    程式設計師也可能犯很多錯
        ex. 決定重寫程式

====30
    以顧客角度試用產品

====31 小員工也能做大事
    1 去做就是了
        有些改善專案的事，一人也能做
    2 病毒性行銷
        ex.問題追蹤資料庫 指派人+寄信
            如果QA拒絕輸入此庫
            可以演戲拒絕其他告知錯誤的方式
    3 建立卓越圈
        自己寫規格 + 時程
        參與面試過程
    4 讓笨蛋無害
        牽制 => 一直報告那個程式的問題，讓他修

    5 遠離干擾
        自己找安靜處
        故意錯開團隊 => 早到 或 晚走
    
    6 提升價值
        如果你不是很有貢獻，以上都沒用，只會被覺得在鬧 樹敵

====32 兩則故事
    好公司 vs 壞公司
    => 相信員工/ 監視員工

    誰不想成為所屬領域的王者呢
    軟體很容易分割成小塊元件，讓每個人擁有一塊領域

    經理人不要太愛插手，確保基層能順利工作就好

====33 
    笨蛋也可複製的SOP 才能擴展
    => 餐廳主廚只能自己出菜 、麥當勞可無限擴張

    預先切好 冷凍儲存的馬鈴薯 => 雖然風味稍差但統一

    軟體業：規則手冊 => 無法適應 新時代

    方法論可讓每個人都提升到 不佳 但可接受的程度
        但會產生約束 激怒聰明人

====34
    微軟面試測試人員的問題：
        如何測試開檔對話框

    事情沒像表面那麼簡單 + 降低風險 = 先設計


    巨大的系統 則必須逐漸演進 ，一開始人[無法設計

====35 非我發明症
    當你是大神時，其他人的程式都是有蟲的垃圾

    建議是
        核心的事業功能 無論如何要自己做

    唯一的例外是自己團隊完全比不贏別人時


====36　策略一　兩種模式
    穩定成長 => 
        小資金，採用能極快獲利的模式
        企業文化重要
        可能會成功，一定不會損失太多錢
    爆炸成長 => 像Amazon那樣 
        沒有對手，就盡速搶地盤 => 極大資金 但要多年後才能獲利
        沒有企業文化(因為根本來不及傳授)
        成功機率低

        網路效應 = 現有客戶數愈多，就會獲得更多新客戶。 價值約等於客戶數平方
        
        鎖定 = 客戶不想更換 的商業特性
            ex. 換手機號、換email

    不要在兩種類型間切換

====37　策略二　雞生蛋蛋生雞問題
    廣告就是把最差的部分反著說
        ex. 造紙業 廣告展示 美麗樹林

        麥金塔剛問世時，沒有軟體可用 =>編了一大本目錄　列出　各種可用軟體　，超小字寫開發中


    死亡螺旋：　有好軟體才會有用戶　＜＞　有用戶才會有人來寫軟體

    相容舊系統　＝　使用其他客戶！！

    不考慮雞生蛋蛋生雞問題的　稱作　想煮沸大海
====38 策略三 進入障礙

    障礙
    知道excel 而且認為他較好  => 巡迴展演 送 展示磁碟片
    購買Excel       => Lotus123用戶轉換時有特別折扣
    購買Windows     => 做一個執行時期的Windows，隨著Excel贈送
    從 Lotus123轉換 => Excel能讀取Lotus123檔案   
    重寫巨集        => Excel能執行Lotus123巨集 
    學新的UI        => 讓Excel能使用Lotus123的快捷鍵
    需要記憶體較多較快的電腦

    某天突然發現市佔從 2成 > 8成，原因通常是最後一個進入障礙消失


    另一種進入障礙 是 切換回來很麻煩 這使人不敢輕易嘗試
    => Excel能匯出Lotus123檔案

    承諾讓人容易離開

====39 策略四 腫脹軟體 80/20
    功能少 卻 要佔掉大量資源
    "大量" 需要量化
    如果程序員不用考慮大小，會完成得更快。
        多的功能用不到也無妨

    80%人只用20%功能
        但每個人都用不一樣的部分

        => 策略在軟體行不通


====40 策略五 開放原始碼的經濟學
    替代品 互補品

    linux免費  但【整體持有成本】高

    只有最具吸引力的開放原始碼計畫 能吸引到那群志願開發者


    理論上能提供的最低價格是【普及價格】
        也就是 會有很多競爭商品時 提供的價格
        【聰明的公司試圖讓 互補品普及化】

    ex. IBM手冊詳細說明零件介面，讓硬體普及 ，使PC需求上升
        微軟讓PC普及，使作業系統需求上升


    IT顧問 互補 企業軟體 => 顧問公司 要讓企業軟體普及化 => 支持開放源碼計畫

    瀏覽器 互補 伺服器 => 瀏覽器免費 => 賣伺服器
    娛樂公司 互補 瀏覽器
    CPU 互補 OS
    桌上型電腦 互補 視窗系統


    跨平台 = 普及化


    軟體 很容易 讓硬體普及化 => 寫個抽象層 => 抽換硬體仍可運作
    硬體 很難 讓軟體普及化 => 軟體切換要適應成本等等





====41
    外包 的 客服會變差 => 層層外包

    脆弱的系統可能表現正常，直到相鄰系統壞掉

====42 微軟輸掉API戰爭
    OS 是為了執行好用的APP用的
    開發者要願意為了你的OS寫APP

    微軟沒有發放windows開發工具 => 保持開發工具的多元性

    
    不向後相容 => windows API 出問題 => 轉往web開發


    物件導向沒有讓生產力大幅提升 ，而是自動化記憶體管理 => managed code
    好的自排 只有一種情境輸 手排

    VB是有史以來賣得最好的程式語言

    .NET擁有自動化的記憶體管理：參照記數、GC
        => visual C#

    

    Html贏了API

====43 
    講空話

====44


====45 連結程式
    編譯出單一可執行檔


====Q&A
    產品經理
        必須是軟體開發者
        對使用者有同情心
        組織能力
        交際手腕
        最重要的技能是隱密地把自己的思想 塞進 程序員腦中

    密切注意以下回饋
        我喜歡你們的產品，不過因為____ 所以不能買 => 比 為何你們沒有X 重要得多


    兩個紙袋套成一個 => 收銀員無法指定紙袋 ，會計/採購指定的

    時程 緩衝時間要訂多少
        10% => 心安
        其實應想到各種類型的緩衝
            想到預期外的功能
            競爭者的舉動，應對
            整合各開發者
            測試後的修正
            員工須處理開發外的事
            進展不順利的預防
            估計時漏列事項

    能否打造監獄式的環境讓軟體運作而病毒不擴散
        沙盒問題
            控制各應用程式細微的執行權限

            安全系統越複雜越可能設地錯誤
            人沒時間管理細部權限

    選擇權費用化
        發行股票 給 員工 ，會稀釋現有股東的權益

        => 公司付錢給員工、付股票給員工 其實都一樣?      

        兩種情況，股價都降低到同一數值
        員工都獲得同樣價值資產

        但發股票的話，公司現金較多  
----